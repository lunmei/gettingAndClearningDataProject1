plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
getwd()
list.files()
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = ".data/restaurants.csv", method ="curl")
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
quantile(restData$councilDistrict,probs=c(0.5,0.75,0.9))
restData <- read.csv("./data/restaurants.csv")
head(restData, n=3)
tail(restData, n=3)
summary(restData)
str(restData)
quantile(restData$councilDistrict, na.rm = TRUE)
quantile(restData$councilDistrict,probs=c(0.5,0.75,0.9))
restData$zipCode
is.na(restData$zipCode)
sum(is.na(restData$zipCode))
?talbe
?table
table(restData$zipCode,useNA="ifany")
restData$councilDistrict
table(restData$councilDistrict,useNA="ifany")
table(restData$councilDistrict,restData$zipCode)
restData$zipCode > 0
?all
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
data(UCBAdmissions)
summary(UCBAdmissions)
str(UCBAdmissions)
head(UCBAdmissions, 2)
UCBAdmissions
UCBAdmissions
class(UCBAdmissions)
head(UCBAdmissions)
DF
xtabs(Freq ~ Gender + Admit,data=DF)
rep(1:9, len = 54)
warpbreaks
class(warpbreaks)
head(warpbreaks)
head(warpbreaks, n =10)
head(warpbreaks, n =20)
head(warpbreaks, n =30)
head(warpbreaks, n =10)
1e5
1e5 == 10000
1e5 == 100000
rnorm(1e5)
x <- c(1,3,8,25,100)
?along
?seq
restData$nearMe <- restData$neighborhood %in% c("Roland Park", "Homeland")
restData$nearMe
table(restData$nearMe)
quantile(restData$zipCode
)
restData$zipCode
quantile(restData$zipCode)
?cut
?sample()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="uscommunity.csv", method="curl")
UScommunityData <- read.csv("uscommunity.csv")
str(UScommunityData)
class(UScommunityData)
head(UScommunityData, n = 5)
head(UScommunityData, n = 1)
agricultureLogical <- UScommunityData$ACR ==3 & UScommunityData$AGS == 6
agricultureLogical
class(agricultureLogical)
which(agricultureLogical)
agricultureLogical[125]
agricultureLogical[124]
install.packages("jpeg")
read.jpeg("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
?read.jpeg
?jpeg
?readJPEG
??readJPEG
x<-readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = FALSE)
install.packages("jpeg")
x<-readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = FALSE)
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = FALSE)
install.packages("libjpeg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "jeff.jpg", method="curl")
list.files()
readJPEG("jeff.jpg", native=FALSE)
library("jpeg")
jeff<-readJPEG("jeff.jpg", native=FALSE)
quantile(jeff)
class(jeff)
dim(jeff)
jeff[1,1]
jeff[1,1,1]
summary(jeff)
quantile(jeff, probs = c(0.3, 0.8))
jeff<-readJPEG("jeff.jpg", native=TRUE)
summary(jeff)
summary(jeff)
dim(jeff)
class(jeff)
quantile(jeff, probs = c(0.3, 0.8))
x <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="GrossDomesticProduct190countries.csv", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="educationData190countries.csv", method="curl")
gdpData <- read.csv("GrossDomesticProduct190countries.csv")
educationData <-read.csv("educationData190countries.csv")
head(gdpData)
head(gdpData, n = 10)
head(eduation, n = 10)
head(education, n = 10)
head(educationData, n = 10)
(educationData, n = 10)
names(educationData)
educationData$CountryCode
names(gdpData)
gdpData(1,)
gdpData[1,]
gdpData[8,]
gdpData[,1]
educationData$CountryCode
class(educationData)
class(gdpData)
rownames(educationData)
?melt
intersect(gdpData, educationData)
intersect(names(gdpData), names(educationData))
names(gdpData)
head(gdpData, 3)
head(gdpData, 10)
names(educationData)
name(gdpData$X) <- "CountryCode"
row.names(gdpData)
col.names(gdpData)
colnames(gdpData)
colnames(gdpData)[colnames(gdpData)=="X"] <-"CountryCode"
colnames(gdpData)
intersect(names(educationData), names(gdpData))
mergedData = merge(gdpData, educationData, all=TRUE)
head(mergedData)
names(mergedData)
dim(educationData)
dim(gdpData)
dim(mergedData)
mergedData$CountryCode
educationData$CountryCode
mergedData$CountryCode
dim(mergedData)
dim(gdpData)
dim(educationData)
gdpData$CountryCode
head(gdpData, n= 10
)
gdpData$X.3
gdpData$X.1
?sort
sort(mergedData$X.3, descending = TRUE)
x<-sort(mergedData$X.3, descending = TRUE)
x
class(x)
x<-sort(mergedData$X.3, descending = TRUE, na.last = NA)
x
x[295]
names(mergedData)
mergedData$ContryCode
mergedData$CountryCode
mergedData[which(meanStepsPerDay$X.3 >0), ]
mergedData[which(mergedData$X.3 >0), ]
mergedData$X.3
mergedData$X.3 >0
mergedData$X.3
class(mergedData$X.3)
mergedData$X.3 == NA
mergedData$X.3 == "NA"
mergedData$X.3 >0
class(educationData)
class(gdpData)
summary(gdpData)
gdpData
gdpData
names(gdpData)
intersect(educationData$CountryCode, gdpData$X)
gdpData$X
intersect(educationData$CountryCode, gdpData$CountryCode)
dim(intersect(educationData$CountryCode, gdpData$CountryCode))
dim(intersect(educationData$CountryCode, gdpData$CountryCode)
)
x<- intersect(educationData$CountryCode, gdpData$CountryCode)
class(x)
dim(x)
length(x)
mergedData
dim(mergedData)
length(x)
x
factor(x)
unique(gdpData$CountryCode)
unique(educationData$CountryCode)
mergedData
names(gdpData)
gpdData$Gross.domestic.product.2012
gdpData$Gross.domestic.product.2012
max(gdpData$Gross.domestic.product.2012)
gdpData$Gross.domestic.product.2012 == 13
sum(gdpData$Gross.domestic.product.2012 == 13 )
gdpData[gdpData$Gross.domestic.product.2012 == 13, ]
gdpData[gdpData$Gross.domestic.product.2012 == 1, ]
gdpData[gdpData$Gross.domestic.product.2012 == 4, ]
gdpData[gdpData$Gross.domestic.product.2012 == 2, ]
gdpData[gdpData$Gross.domestic.product.2012 == 3, ]
gdpData[gdpData$Gross.domestic.product.2012 == 4, ]
gdpData[gdpData$Gross.domestic.product.2012 == 5, ]
gdpData[gdpData$Gross.domestic.product.2012 == 6, ]
names(educationData)
mergedData[mergedData$Gross.domestic.product.2012 == 6, ]
mergedData[mergedData$Gross.domestic.product.2012 == 14, ]
mergedData[mergedData$Gross.domestic.product.2012 == 13, ]
mergedData[mergedData$Gross.domestic.product.2012 == 13, ]
mergedData[mergedData$Gross.domestic.product.2012 == 13, ]$Income.Group
mergedData[mergedData$Gross.domestic.product.2012 == 13, ]$region
mergedData[mergedData$Gross.domestic.product.2012 == 13, ]$Region
mergedData[mergedData$Gross.domestic.product.2012 == 1, ]$Region
mergedData[mergedData$Gross.domestic.product.2012 == 2, ]$Region
mergedData[mergedData$Gross.domestic.product.2012 == 19, ]$Region
mergedData[mergedData$Gross.domestic.product.2012 == 19, ]
class(mergedData[mergedData$Gross.domestic.product.2012 == 19, ])
dim(mergedData[mergedData$Gross.domestic.product.2012 == 19, ])
dim(mergedData[mergedData$Gross.domestic.product.2012 == 11, ])
dim(mergedData[mergedData$Gross.domestic.product.2012 == 1, ])
class(mergedData)
dim(mergedData)
head(educationData)
dim(gdpData)
gdpData[gdpData$]
names(gdpData)
gdpData[gdpData$Gross.domestic.product.2012  == 1,]
sum(gdpData$ContryCode == USA)
sum(gdpData$ContryCode == "USA")
sum(gdpData$CountryCode == "USA")
sum(educationData$CountryCode == "USA")
mergedData = merge(educationData, gdpData, by.x="CountryCode", all = TRUE)
head(mergedData)
dim(mergedData)
sum(educationData$CountryCode == "USA")
dim(mergedData[mergedData$Gross.domestic.product.2012 == 1, ])
mergedData[mergedData$Gross.domestic.product.2012 == 1, ]
?mergedData
?merge
mergedData = merge(educationData, gdpData, by.x="CountryCode", all = FALSE)
mergedData[mergedData$Gross.domestic.product.2012 == 1, ]
mergedData[mergedData$Gross.domestic.product.2012 == 13, ]
mergedData[mergedData$Gross.domestic.product.2012 == 13, ]$CountryCode
mergedData$Income.Group
mergedData[which(mergedData$Income.Group == "High income: OECD")]
mergedData[which(mergedData$Income.Group == "High income: OECD"),]
x<-mergedData[which(mergedData$Income.Group == "High income: OECD"),]
summary(x$X.3)
average(x$X.3)
mean(x$X.3)
x$X.3
class(x$X.3)
as.numeric(x$X.3)
x$X.3
x$X.3[1]
sum(x$X.3)
as.numeric(as.character(x$X.3))
x$X.3
levels(x$X.3)
x$X.3
as.character(x$X.3)
as.numeric(as.character(x$X.3))
as.character(x$X.3)
y<-as.character(x$X.3)
class(y)
dim(y)
length(y)
as.numeric(y)
as.numeric(y[])
as.numeric("0.2")
as.numeric(" 0.2 ")
as.numeric(y[1])
y
y[1]
as.numeric("1,2")
?gsub
sub(",", "", "23,12,2")
qsub(",", "", "23,12,2")
gsub(",", "", "23,12,2")
gsub(",", "", y)
as.numeric(y)
y[1]
y<-gsub(",", "", y)
as.numeric(y)
y<-as.numeric(y)
mean(y)
gdpData$Income.group
educationData$Income.Group
mean(y)
y
mergedData$X
mergedData$Gross.domestic.product.2012
as.numeric(mergedData$Gross.domestic.product.2012)
as.numeric(mergedData$Gross.domestic.product.2012)
x<-mergedData[which(mergedData$Income.Group == "High income: OECD"),]
x
x$Income.Group
x$Gross.domestic.product.2012
mean(as.numeric(x$Gross.domestic.product.2012))
as.numeric(x$Gross.domestic.product.2012)
as.character(x$Gross.domestic.product.2012)
as.numeric(as.character(x$Gross.domestic.product.2012))
mean(as.numeric(as.character(x$Gross.domestic.product.2012)))
mergedData$X.3
mergedData$Gross.domestic.product.2012<-as.numeric(as.character(mergedData$Gross.domestic.product.2012))
mergedData$Gross.domestic.product.2012
mergedData$GDPrankGroup <- cut2(mergedData$Gross.domestic.product.2012, g = 5)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
mergedData$GDPrankGroup <- cut2(mergedData$Gross.domestic.product.2012, g = 5)
mergedData$GDPrankGroup
table(mergedData$GDPrankGroup)
table(mergedData$GDPrankGroup, mergedData$Income.Group)
educationData$CountryCode
dim(educationData)
gdpData$CountryCode
intersect(gdpData$CountryCode, educationData$CountryCode)
length(intersect(gdpData$CountryCode, educationData$CountryCode))
unique(intersect(gdpData$CountryCode, educationData$CountryCode))
unique(unique(intersect(gdpData$CountryCode, educationData$CountryCode)))
length(unique(intersect(gdpData$CountryCode, educationData$CountryCode)))
dim(mergedData)
mergedData$Gross.domestic.product.2012
sort(mergedData$Gross.domestic.product.2012)
190-13
190-12
mergedData$Gross.domestic.product.2012 == 178
mergedData[mergedData$Gross.domestic.product.2012 == 178,]$CountryCode
mergedData[which(mergedData$Gross.domestic.product.2012 == 178),]$CountryCode
mergedData[which(mergedData$Gross.domestic.product.2012 == 179),]$CountryCode
mergedData[which(mergedData$Gross.domestic.product.2012 == 177),]$CountryCode
getwd()
list.files()
setwd("./project1")
getwd()
list.files
list.files()
setwd("UCI HAR Dataset/")
getwd()
list.files()
features <- read.tables("features.txt")
features <- read.files("features.txt")
features <- read.table("features.txt")
class(features)
dim(features)
head(features)
summary(features)
features
list.files()
activity_labels <- read.table("activity_labels.txt")
activity_labels
X_train <- read.table("X_train.txt")
_train <- read.table("./train/X_train.txt")
X_train <- read.table("./train/X_train.txt")
class(X_train)
names(X_train)
dim(features)
dim(activity_labels)
dim(X_train)
names(X_train)
colnames(X_train)
names(X_train)
Rownames(X_train)
head(X_train)
plot(X_train$V557)
subject_train <-read.table("./train/subject_train.txt")
dim(subject_train)
y_train <-read.table("./train/y_train.txt")
dim(y_train)
factor(y_train)
y_train
factor(y_train)
class(y_train)
dim(y_train)
y_train[1]
y_train[2]
y_train[1]
factor(y_train[1])
x <-c(1, 2, 3, 2)
factor(x)
y_train
unique(y_train)
subject_train
unique(subject_train)
subject_train
unique(subject_train)
?unique
factor(subject_train)
factor(unique(subject_train)
)
sort(subject_train)
sort(subject_train[1])
sort(subject_train[,1])
factor(subject_train[,1])
body_gyro_z_train <- read.table("./train/Inertial Signals/body_gyro_z_train.txt")
dim(body_gyro_z_train)
128*3
body_gyro_y_train <- read.table("./train/Inertial Signals/body_gyro_y_train.txt")
dim(body_gyro_y_train)
561/128
body_gyro_x_train <- read.table("./train/Inertial Signals/body_gyro_x_train.txt")
total_acc_z_train <- read.table("./train/Inertial Signals/total_acc_z_train.txt")
total_acc_y_train <- read.table("./train/Inertial Signals/total_acc_y_train.txt")
total_acc_x_train <- read.table("./train/Inertial Signals/total_acc_x_train.txt")
body_acc_z_train  <- read.table("./train/Inertial Signals/body_acc_z_train.txt")
body_acc_y_train  <- read.table("./train/Inertial Signals/body_acc_y_train.txt")
body_acc_x_train  <- read.table("./train/Inertial Signals/body_acc_x_train.txt")
dim(total_acc_x_train)
dim(body_acc_x_train)
X_test <- read.table("./test/X_test.txt")
subject_test <-read.table("./test/subject_test.txt")
y_test <-read.table("./test/y_test.txt")
body_gyro_z_test <- read.table("./test/Inertial Signals/body_gyro_z_test.txt")
body_gyro_y_test <- read.table("./test/Inertial Signals/body_gyro_y_test.txt")
body_gyro_x_test <- read.table("./test/Inertial Signals/body_gyro_x_test.txt")
total_acc_z_test <- read.table("./test/Inertial Signals/total_acc_z_test.txt")
total_acc_y_test <- read.table("./test/Inertial Signals/total_acc_y_test.txt")
total_acc_x_test <- read.table("./test/Inertial Signals/total_acc_x_test.txt")
body_acc_z_test  <- read.table("./test/Inertial Signals/body_acc_z_test.txt")
body_acc_y_test  <- read.table("./test/Inertial Signals/body_acc_y_test.txt")
body_acc_x_test  <- read.table("./test/Inertial Signals/body_acc_x_test.txt")
intersect(names(X_test, X_train))
intersect(names(X_test), names(X_train))
X_test[1,1]
X_train[1,1]
X_data = merge(X_test, X_train)
dim(X_data)
X_data = merge(X_test, X_train, all=TRUE)
dim(X_data)
7352*2
df1 = data.frame(id=sample(1:10),x=rnorm(10))
df1
df2 = data.frame(id=sample(1:10),y=rnorm(10))
df2
join(df1,df2)
library("plyr")
join(df1,df2)
df1
df2
arrange(join(df1,df2),id)
dim(subject_test)
dim(X_test)
dim(y_test)
factor(subject_test[,1])
factor(subject_train[,1])
table(subject_test[,1])
table(subject_train[,1])
table(subject_train[,1])
subject_test[,1]
dim(X_data)
7352+2947
class(features)
head(features)
dim(features)
features[1,1]
features[1,2]
grep(features[,2], mean)
?grep
grep("mean", features[,2])
features
features[1:3,2]
features[1:6,2]
grep("mean", features[,2])
meanList <-grep("mean", features[,2])
class(meanList)
X_data[, meanList]
X_datamean<-X_data[, meanList]
names(X_datamean)
meanList
meanList <-grep("mean", features[,2])
X_datamean<-X_data[, meanList]
stdList  <-grep("std", features[,2])
X_datastd <-X_data[,stdList]
X_data_meanstd <- cbind(X_datamean, X_datastd)
meanList <-grep("mean", features[,2])
X_datamean<-X_data[, meanList]
stdList  <-grep("std", features[,2])
X_datastd <-X_data[,stdList]
X_data_meanstd <- cbind(X_datamean, X_datastd)
meanList <-grep("mean", features[,2])
meanList <-grep("mean", features[,2])
X_datamean<-X_data[, meanList]
stdList  <-grep("std", features[,2])
X_datastd <-X_data[,stdList]
X_data_meanstd <- cbind(X_datamean, X_datastd)
dim(X_data_meanstd)
7352+2947
meanList
features[meanList]
features[meanList,2]
c(features[meanList], features[stdList])
c(features[meanList,2], features[stdList,2])
features[meanList,2]
c(features[meanList,2], features[stdList,2])
features[meanList,2]
names(X_data_meanstd)
names(X_data_meanstd) <-
